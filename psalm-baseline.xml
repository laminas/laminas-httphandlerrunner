<?xml version="1.0" encoding="UTF-8"?>
<files psalm-version="4.8.1@f73f2299dbc59a3e6c4d66cff4605176e728ee69">
  <file src="src/Emitter/EmitterStack.php">
    <MixedArgument occurrences="1">
      <code>$index</code>
    </MixedArgument>
    <MixedAssignment occurrences="1">
      <code>$emitter</code>
    </MixedAssignment>
    <MixedMethodCall occurrences="1">
      <code>emit</code>
    </MixedMethodCall>
    <UndefinedDocblockClass occurrences="3">
      <code>InvalidArgumentException</code>
      <code>InvalidArgumentException</code>
      <code>InvalidArgumentException</code>
    </UndefinedDocblockClass>
  </file>
  <file src="src/Emitter/SapiEmitterTrait.php">
    <DocblockTypeContradiction occurrences="1">
      <code>headers_sent()</code>
    </DocblockTypeContradiction>
    <MixedArgumentTypeCoercion occurrences="1">
      <code>$header</code>
    </MixedArgumentTypeCoercion>
  </file>
  <file src="src/RequestHandlerRunner.php">
    <MixedArgument occurrences="2">
      <code>$request</code>
      <code>$response</code>
    </MixedArgument>
    <MixedAssignment occurrences="2">
      <code>$request</code>
      <code>$response</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="2">
      <code>ResponseInterface</code>
      <code>ServerRequestInterface</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="2">
      <code>$serverRequestErrorResponseGenerator($exception)</code>
      <code>$serverRequestFactory()</code>
    </MixedReturnStatement>
  </file>
  <file src="test/Emitter/EmitterStackTest.php">
    <MixedArgument occurrences="3">
      <code>$value</code>
      <code>$value</code>
      <code>$value</code>
    </MixedArgument>
  </file>
  <file src="test/Emitter/SapiStreamEmitterTest.php">
    <InvalidPropertyAssignmentValue occurrences="1">
      <code>new SapiStreamEmitter()</code>
    </InvalidPropertyAssignmentValue>
    <MissingClosureParamType occurrences="5">
      <code>$bufferLength</code>
      <code>$bufferLength</code>
      <code>$bufferLength</code>
      <code>$length</code>
      <code>$position</code>
    </MissingClosureParamType>
    <MissingClosureReturnType occurrences="4">
      <code>function ($bufferLength) use (&amp; $peakBufferLength) {</code>
      <code>function ($bufferLength) use (&amp; $peakBufferLength) {</code>
      <code>function ($position, $length = null) use (&amp; $sizeBytes) {</code>
      <code>function () use (&amp; $peakMemoryUsage) {</code>
    </MissingClosureReturnType>
    <MixedArgument occurrences="6">
      <code>$first</code>
      <code>$last - $first + 1</code>
      <code>$length</code>
      <code>$position</code>
      <code>$sizeBytes</code>
      <code>$startPosition</code>
    </MixedArgument>
    <MixedAssignment occurrences="9">
      <code>$first</code>
      <code>$last</code>
      <code>$length</code>
      <code>$peakBufferLength</code>
      <code>$peakBufferLength</code>
      <code>$peakBufferLength</code>
      <code>$peakMemoryUsage</code>
      <code>$position</code>
      <code>$startPosition</code>
    </MixedAssignment>
    <MixedFunctionCall occurrences="1">
      <code>$closureTrackMemoryUsage()</code>
    </MixedFunctionCall>
    <MixedOperand occurrences="11">
      <code>$first</code>
      <code>$first</code>
      <code>$last</code>
      <code>$last</code>
      <code>$last</code>
      <code>$maxBufferLength * $rangeBlocks[1]</code>
      <code>$peakMemoryUsage</code>
      <code>$rangeBlocks[0]</code>
      <code>$rangeBlocks[1]</code>
      <code>$sizeBytes</code>
      <code>($maxBufferLength * $rangeBlocks[1]) + $maxBufferLength</code>
    </MixedOperand>
    <PossiblyUndefinedVariable occurrences="2">
      <code>$first</code>
      <code>$last</code>
    </PossiblyUndefinedVariable>
  </file>
  <file src="test/RequestHandlerRunnerTest.php">
    <MissingClosureParamType occurrences="1">
      <code>$e</code>
      <code>$e</code>
    </MissingClosureParamType>
    <MissingClosureReturnType occurrences="6">
      <code>function ($e) use ($exception, $response) {</code>
      <code>function () use ($exception) {</code>
      <code>function () {</code>
      <code>function () {</code>
      <code>function (Throwable $e) use ($response) {</code>
      <code>function (Throwable $e) {</code>
    </MissingClosureReturnType>
  </file>
  <file src="test/TestAsset/MockStreamHelper.php">
    <MixedArgument occurrences="2">
      <code>$data</code>
      <code>$remainingContents</code>
    </MixedArgument>
    <MixedAssignment occurrences="2">
      <code>$data</code>
      <code>$remainingContents</code>
    </MixedAssignment>
    <MixedInferredReturnType occurrences="1">
      <code>string</code>
      <code>string</code>
      <code>string</code>
    </MixedInferredReturnType>
    <MixedReturnStatement occurrences="1">
      <code>is_callable($this-&gt;contents) ? ($this-&gt;contents)(0) : $this-&gt;contents</code>
    </MixedReturnStatement>
  </file>
  <file src="test/TestAsset/SapiResponse.php">
    <InvalidScalarArgument occurrences="1"/>
    <MissingReturnType occurrences="1">
      <code>header</code>
    </MissingReturnType>
  </file>
</files>
